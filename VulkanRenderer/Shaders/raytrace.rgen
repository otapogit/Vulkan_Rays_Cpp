// ================================
// raytrace.rgen - Raygen Shader
// ================================
#version 460
#extension GL_EXT_ray_tracing : require

layout(binding = 1, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 2, set = 0, rgba8) uniform image2D image;

layout (binding = 1, set = 1) readonly uniform UniformBuffer { mat4 MVP; } ubo;

struct RayPayload {
    vec3 color;
    int depth;
    bool hit;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;


    
    //Multiplicar por la inversa de la mvp para igualar las transformaciones
    vec4 origin = ubo.MVP * vec4(0,0,2,1);
    vec4 target = ubo.MVP * vec4(d.x, d.y, 0, 1);
    vec4 direction = vec4(normalize(target.xyz - origin.xyz), 0);
    
    
    rayPayload.color = vec3(0.0);
    rayPayload.depth = 0;  // Empezar en profundidad 0
    rayPayload.hit = false;

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    traceRayEXT(topLevelAS, rayFlags, cullMask, 0 /*sbtRecordOffset*/, 
                0 /*sbtRecordStride*/, 0 /*missIndex*/, origin.xyz, 
                tmin, direction.xyz, tmax, 0 /*payload*/);

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(rayPayload.color, 1.0));
}